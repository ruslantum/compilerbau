

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Type Id [Arg] [Stm]
    | DFunInl Type Id [Arg] [Stm]
    | DFunProt Type Id [Arg]
    | DFunProtInl Type Id [Arg]
    | DTypeDef Type Id
    | DDecls Type [Id]
    | DInit Type Id Exp
    | DInitRef Type Id Exp
    | DStruc Id [Decl]
    | DUse [Qual]
    | DConst Def
  deriving (Eq, Ord, Show, Read)

data Arg
    = ADeclBase Type
    | ADeclBaseCns Type
    | ADeclBaseAdr Type
    | ADeclBaseAdrCns Type
    | ADecl Type Id
    | ADeclCns Type Id
    | ADeclAdr Type Id
    | ADeclAdrCns Type Id
    | ADeclInit Type Id Exp
    | ADeclInitCns Type Id Exp
    | ADeclInitAdr Type Id Exp
    | ADeclInitAdrCns Type Id Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type [Id]
    | SInit Type Id Exp
    | SInitRef Type Id Exp
    | SInitCnst Type Id Exp
    | SInitCnstRef Type Id Exp
    | STypeDef Type Id
    | SStruc Id [Decl]
    | SReturn Exp
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SForDecl Type Id Exp Exp Stm
    | SForInit Type Id Exp Exp Exp Stm
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SBlock [Stm]
  deriving (Eq, Ord, Show, Read)

data Decl = StructDecl Type Id
  deriving (Eq, Ord, Show, Read)

data Qual = QTempl Id [Type] | QDecl Id
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EChar Char
    | EString [String]
    | EInd Exp Exp
    | EQual [Qual]
    | EApp Exp [Exp]
    | EStrProj Exp Exp
    | EStrProj2 Exp Exp
    | EPostInc Exp
    | EPostDec Exp
    | EDeref Exp
    | EPreInc Exp
    | EPreDec Exp
    | ENeg Exp
    | EMult Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | EDiff Exp Exp
    | EShiftLeft Exp Exp
    | EShiftRight Exp Exp
    | ELessThn Exp Exp
    | EGrtrThn Exp Exp
    | ELessOrEq Exp Exp
    | EGrtrOrEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EConj Exp Exp
    | EDisj Exp Exp
    | EAssign Exp Exp
    | EAssignPlus Exp Exp
    | ECond Exp Exp Exp
    | EExp Exp
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_bool | Type_double | Type_int | Type_void | Type1 [Qual]
  deriving (Eq, Ord, Show, Read)

