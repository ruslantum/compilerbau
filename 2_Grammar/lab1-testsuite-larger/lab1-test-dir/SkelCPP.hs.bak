module SkelCPP where

-- Haskell module generated by the BNF converter

import AbsCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
  DFunInl type_ id args stms -> failure x
  DFunProt type_ id args -> failure x
  DFunProtInl type_ id args -> failure x
  DTypeDef type_ id -> failure x
  DDecls type_ ids -> failure x
  DInit type_ id exp -> failure x
  DInitRef type_ id exp -> failure x
  DStruc id stm -> failure x
  DUse quals -> failure x
  DConst def -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADeclBase type_ -> failure x
  ADeclBaseCns type_ -> failure x
  ADeclBaseAdr type_ -> failure x
  ADeclBaseAdrCns type_ -> failure x
  ADecl type_ id -> failure x
  ADeclCns type_ id -> failure x
  ADeclAdr type_ id -> failure x
  ADeclAdrCns type_ id -> failure x
  ADeclInit type_ id exp -> failure x
  ADeclInitCns type_ id exp -> failure x
  ADeclInitAdr type_ id exp -> failure x
  ADeclInitAdrCns type_ id exp -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp exp -> failure x
  SDecl type_ ids -> failure x
  SInit type_ id exp -> failure x
  SInitRef type_ id exp -> failure x
  SInitCnst type_ id exp -> failure x
  SInitCnstRef type_ id exp -> failure x
  STypeDef type_ id -> failure x
  SStruc id decls -> failure x
  SReturn exp -> failure x
  SWhile exp stm -> failure x
  SDoWhile stm exp -> failure x
  SForDecl type_ id exp1 exp2 stm -> failure x
  SForInit type_ id exp1 exp2 exp3 stm -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SBlock stms -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  StructDecl type_ id -> failure x
transQual :: Qual -> Result
transQual x = case x of
  QTempl id types -> failure x
  QDecl id -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ETrue -> failure x
  EFalse -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EChar char -> failure x
  EString strings -> failure x
  EInd exp1 exp2 -> failure x
  EQual quals -> failure x
  EApp exp exps -> failure x
  EStrProj exp1 exp2 -> failure x
  EStrProj2 exp1 exp2 -> failure x
  EPostInc exp -> failure x
  EPostDec exp -> failure x
  EDeref exp -> failure x
  EPreInc exp -> failure x
  EPreDec exp -> failure x
  ENeg exp -> failure x
  EMult exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  EDiff exp1 exp2 -> failure x
  EShiftLeft exp1 exp2 -> failure x
  EShiftRight exp1 exp2 -> failure x
  ELessThn exp1 exp2 -> failure x
  EGrtrThn exp1 exp2 -> failure x
  ELessOrEq exp1 exp2 -> failure x
  EGrtrOrEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EConj exp1 exp2 -> failure x
  EDisj exp1 exp2 -> failure x
  EAssign exp1 exp2 -> failure x
  EAssignPlus exp1 exp2 -> failure x
  ECond exp1 exp2 exp3 -> failure x
  EExp exp -> failure x
transType :: Type -> Result
transType x = case x of
  Type_bool -> failure x
  Type_double -> failure x
  Type_int -> failure x
  Type_void -> failure x
  Type1 quals -> failure x

