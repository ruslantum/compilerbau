module TypeCheckerCPP where

-- Haskell module generated by the BNF converter

import PrintCPP
import AbsCPP
import ErrM

type Result = Err String

typecheck   :: Program -> Err ()
typecheck (PDefs definitions) = fail "TypeCheckerCPP::typecheck not yet implemented"

checkStatements :: Environment -> [Stm] -> Err ()
checkStatements environment [] = return ()
checkStatements environment (currentStm:rest) = 
  do  newEnvironment <- checkStatement environment currentStm
      checkStatements newEnvironment rest

checkStatement  :: Environment -> Stm -> Err Environment
checkStatement environment statement  = 
  case statement of
      SExp exp                -> fail "Not yet implemented"
      SDecls t ids            -> fail "Not yet implemented" -- add to env
      SInit t id exp          -> fail "Not yet implemented"
      SReturn exp             -> fail "Not yet implemented"
      SReturnVoid             -> fail "Not yet implemented"
      SWhile exp stm          -> fail "Not yet implemented"
      SBlock stms             -> fail "Not yet implemented"
      SIfElse exp stm1 stm2   -> fail "Not yet implemented"

checkExpression :: Environment -> Exp -> Type -> Err ()
checkExpression environment expression tp = 
  do  newType <- inferExpression environment expression
      if newType /= tp
        then fail (printTree expression ++ " has type " ++ printTree newType ++ " expected " ++ printTree tp)
        else return ()

inferExpression :: Environment -> Exp -> Err Type 
inferExpression environment expression = 
  case expression of
    ETrue               -> return Type_bool
    EFalse              -> return Type_bool
    EInt _              -> return Type_int
    EDouble _           -> return Type_double
    EString _           -> return Type_string
    EId id              -> fail "Not yet implemented"
    EApp id expressions -> fail "Not yet implemented"
    EPIncr expression   -> fail "Not yet implemented"
    EPDecr expression   -> fail "Not yet implemented"
    EIncr expression    -> fail "Not yet implemented"
    EDecr expression    -> fail "Not yet implemented"
    ETimes e1 e2        -> fail "Not yet implemented"
    EDiv e1 e2          -> fail "Not yet implemented"
    EPlus e1 e2         -> fail "Not yet implemented"
    EMinus e1 e2        -> fail "Not yet implemented"
    ELt e1 e2           -> fail "Not yet implemented"
    EGt e1 e2           -> fail "Not yet implemented"
    ELtEq e1 e2         -> fail "Not yet implemented"
    EGtEq e1 e2         -> fail "Not yet implemented"
    EEq e1 e2           -> fail "Not yet implemented"
    ENEq e1 e2          -> fail "Not yet implemented"
    EAnd e1 e2          -> fail "Not yet implemented"
    EOr e1 e2           -> fail "Not yet implemented"
    EAss e1 e2          -> fail "Not yet implemented"
    ETyped expression tp -> fail "Not yet implemented"



failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ id -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp exp -> failure x
  SDecls type_ ids -> failure x
  SInit type_ id exp -> failure x
  SReturn exp -> failure x
  SReturnVoid -> failure x
  SWhile exp stm -> failure x
  SBlock stms -> failure x
  SIfElse exp stm1 stm2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ETrue -> failure x
  EFalse -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EString string -> failure x
  EId id -> failure x
  EApp id exps -> failure x
  EPIncr exp -> failure x
  EPDecr exp -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EGtEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
  ETyped exp type_ -> failure x
transType :: Type -> Result
transType x = case x of
  Type_bool -> failure x
  Type_int -> failure x
  Type_double -> failure x
  Type_void -> failure x
  Type_string -> failure x


type Environment = [[(Id, Type)]] -- List of list of ids+types
emptyEnvironment :: Environment
emptyEnvironment = [[]]

addVariable :: Environment -> Id -> Type -> Err Environment
addVariable (scope:rest) id tp = 
    case lookup id scope of
      Nothing -> return (((id, tp):scope):rest)
      Just _  -> fail ("Variable " ++ printTree id ++ " already declared.")

lookupVariable :: Environment -> Id -> Err Type
lookupVariable [] id = fail $ "Unknown variable " ++ printTree id ++ "."
lookupVar (scope:rest) id = case lookup id scope of
                             Nothing  -> lookupVar rest id
                             Just tp  -> return tp

addScope :: Environment -> Environment
addScope env = []:env -- Push new scope

